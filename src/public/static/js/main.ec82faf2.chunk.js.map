{"version":3,"sources":["helper/index.ts","chapaClient.ts","state/cards/cardSlice.ts","Add/AddCard.tsx","store.ts","List/ListItem.tsx","List/List.tsx","App.tsx","index.tsx"],"names":["chapaClient","apiKey","ApiKey","CHAPA_LINK","CHAPA_LOCaL_LINK","this","data","fetch","method","body","JSON","stringify","headers","api_key","res","json","id","cardSlice","createSlice","name","initialState","cards","count","reducers","setCards","state","action","payload","length","addCard","deleteCard","filter","card","actions","selectCards","cardReducer","reducer","AddCard","useState","card_number","csv","expiry","values","setValues","error","setError","dispatch","useDispatch","handleChange","event","target","value","setTimeout","handleSubmit","a","preventDefault","createCreditCard","success","className","role","htmlFor","onChange","type","aria-describedby","onClick","combineReducers","store","createStore","useAppDispatch","useAppSelector","useSelector","CardListItem","DeleteButton","handleClick","deleteCreditCard","resp","console","log","List","loading","setLoading","useEffect","getAllCreditCards","allCards","fetchCards","map","message","index","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec82faf2.chunk.js","sourcesContent":["import { ChapaClient } from \"../chapaClient\";\n\nexport const chapaClient = new ChapaClient(\n    \"4ada6ec0f287771ae1e4833660609642e786ae332de2da40ffce6e8c554b4b2f\",\n);\n\nexport default chapaClient;\n","/* eslint-disable no-console */\n/* eslint-disable functional/no-this-expression */\n/* eslint-disable functional/no-class */\nexport interface CreditCard {\n    csv: string;\n    expiry: string;\n    card_number: string;\n}\n\nexport interface CreditCardData extends CreditCard {\n    id: string;\n}\n\nexport class ChapaClient {\n    private ApiKey: string;\n    private CHAPA_LINK = \"https://chapa-test.herokuapp.com/api/cards\";\n    private CHAPA_LOCaL_LINK = \"http://localhost:5001/api/cards\";\n\n    constructor(apiKey: string) {\n        this.ApiKey = apiKey;\n    }\n\n    public async createCreditCard(\n        data: CreditCard,\n    ): Promise<{ data: CreditCardData; success: boolean; message: string }> {\n        const res = await fetch(this.CHAPA_LINK, {\n            method: \"POST\",\n            body: JSON.stringify(data),\n            headers: {\n                api_key: this.ApiKey,\n                \"content-type\": \"application/json;charset=UTF-8\",\n            },\n        });\n        const json = await res.json();\n        return { ...json, data: json.data as CreditCardData };\n    }\n\n    public async getCreditCard(\n        id: string,\n    ): Promise<{ data: CreditCardData; success: boolean; message: string }> {\n        const res = await fetch(`${this.CHAPA_LINK}/${id}`, {\n            method: \"GET\",\n            headers: {\n                api_key: this.ApiKey,\n                \"content-type\": \"application/json;charset=UTF-8\",\n            },\n        });\n        const json = await res.json();\n        return { ...json, data: json.data as CreditCardData };\n    }\n    public async deleteCreditCard(id: string): Promise<{ success: boolean; message: string }> {\n        const res = await fetch(`${this.CHAPA_LINK}/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                api_key: this.ApiKey,\n                \"content-type\": \"application/json;charset=UTF-8\",\n            },\n        });\n        const json = await res.json();\n        return json;\n    }\n    public async getAllCreditCards(): Promise<{\n        data: CreditCardData[];\n        success: boolean;\n        message: string;\n    }> {\n        const res = await fetch(this.CHAPA_LINK, {\n            method: \"GET\",\n            headers: {\n                api_key: this.ApiKey,\n                \"content-type\": \"application/json;charset=UTF-8\",\n            },\n        });\n        const json = await res.json();\n        return { ...json, data: json.data as CreditCardData[] };\n    }\n}\n\n// const client = new ChapaClient(\"4ada6ec0f287771ae1e4833660609642e786ae332de2da40ffce6e8c554b4b2f\");\n\n// const allCards = client.getAllCreditCards();\n// allCards.then((data) => console.log(data));\n// const cardById = client.getCreditCard(\"6099baa735f2b6f25fd76d1d\");\n// cardById.then((data) => console.log(data));\n\n// const uploadCard = client.createCreditCard({\n//     csv: \"764\",\n//     expiry: \"12/23\",\n//     card_number: \"8947775542855701025\",\n// });\n// uploadCard.then((data) => console.log(data));\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { CreditCardData } from \"../../chapaClient\";\n\nimport { RootState } from \"../../store\";\n\nexport interface CreditCardState {\n    cards: CreditCardData[];\n    count: number;\n    card?: CreditCardData;\n}\n\nconst initialState: CreditCardState = {\n    cards: [],\n    count: 0,\n};\n\nconst cardSlice = createSlice({\n    name: \"message_store\",\n    initialState,\n    reducers: {\n        setCards: (state: CreditCardState, action: PayloadAction<CreditCardData[]>) => ({\n            ...state,\n            cards: action.payload,\n            count: action.payload.length,\n        }),\n        addCard: (state: CreditCardState, action: PayloadAction<CreditCardData>) => ({\n            ...state,\n            cards: [action.payload, ...state.cards],\n            count: state.cards.length + 1,\n        }),\n        deleteCard: (state: CreditCardState, action: PayloadAction<string>) => ({\n            ...state,\n            cards: state.cards.filter((card) => card.id !== action.payload),\n            count: state.cards.length - 1,\n        }),\n    },\n});\n\nexport const { setCards, addCard, deleteCard } = cardSlice.actions;\n\nexport const selectCards = (state: RootState): CreditCardData[] => state.cards.cards;\n\nexport const cardReducer = cardSlice.reducer;\n","import React, { ChangeEvent, MouseEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { CreditCard } from \"../chapaClient\";\nimport chapaClient from \"../helper\";\nimport { addCard } from \"../state/cards/cardSlice\";\n\nfunction AddCard() {\n    const [values, setValues] = useState<CreditCard>({\n        card_number: \"0\",\n        csv: \"0\",\n        expiry: \"0\",\n    });\n    const [error, setError] = useState(false);\n    const dispatch = useDispatch();\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setValues({\n            ...values,\n            [name]: value,\n        });\n        setTimeout(() => {\n            if (\n                values.csv !== \"0\" &&\n                values.expiry !== \"0\" &&\n                values.card_number !== \"0\" &&\n                error\n            ) {\n                setError(false);\n            }\n        }, 200);\n    };\n    const handleSubmit = async (event: any) => {\n        event.preventDefault();\n        if (values.csv !== \"0\" && values.expiry !== \"0\" && values.card_number !== \"0\") {\n            const card = await chapaClient.createCreditCard(values);\n            if (card.success) dispatch(addCard(card.data));\n        } else {\n            setError(true);\n        }\n    };\n    return (\n        <div className=\"col-6\">\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Invalid Input Try Again.\n                </div>\n            )}\n            <form>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"csvInput\" className=\"form-label\">\n                        Card CSV\n                    </label>\n                    <input\n                        onChange={handleChange}\n                        type=\"text\"\n                        name=\"csv\"\n                        className=\"form-control\"\n                        id=\"csvInput\"\n                        aria-describedby=\"credit card csv\"\n                    ></input>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"expiryInput\" className=\"form-label\">\n                        Card Expiry\n                    </label>\n                    <input\n                        onChange={handleChange}\n                        type=\"text\"\n                        name=\"expiry\"\n                        className=\"form-control\"\n                        id=\"expiryInput\"\n                        aria-describedby=\"expiryInput\"\n                    ></input>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"cardNumberInput\" className=\"form-label\">\n                        Card Number\n                    </label>\n                    <input\n                        onChange={handleChange}\n                        type=\"text\"\n                        name=\"card_number\"\n                        className=\"form-control\"\n                        id=\"cardNumberInput\"\n                        aria-describedby=\"emailHelp\"\n                    ></input>\n                </div>\n                <button onClick={handleSubmit} className=\"btn btn-primary\">\n                    Submit\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default AddCard;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\n\nimport { cardReducer } from \"./state/cards/cardSlice\";\n\n/**\n * Normally, I would have prefered working with the modern redux/toolkit than traditional one,\n * since you ask for it i have done the project using only redux.\n *\n */\n\nconst reducers = combineReducers({\n    cards: cardReducer,\n});\n\nexport const store = createStore(reducers, {});\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\n\nimport { useAppDispatch } from \"../store\";\nimport { CreditCardData } from \"../chapaClient\";\nimport { deleteCard } from \"../state/cards/cardSlice\";\nimport chapaClient from \"../helper\";\n\ninterface CardItemProps {\n    card: CreditCardData;\n}\n\nexport const CardListItem: React.FC<CardItemProps> = ({ card }: CardItemProps) => (\n    <div className={\"card rounded-3 my-2 bg-dark text-white\"}>\n        <div className={\"card-body\"}>\n            <div className=\"row\">\n                <div className=\"col col-10 col-lg-11 col-sm-11 col-md-10\">\n                    <div className=\"row\">\n                        <div className=\"col col-sm-4\">CSV:</div>\n                        <div className=\"col col-sm-8\">{card.csv}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col col-sm-4\">Expiry:</div>\n                        <div className=\"col col-sm-8\">{card.expiry}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col col-sm-4\">Card Number:</div>\n                        <div className=\"col col-sm-8\">{card.card_number}</div>\n                    </div>\n                </div>\n                <div className=\"col col-1 col-lg-1 col-sm-1 col-md-1\">\n                    <DeleteButton id={card.id} />\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\ninterface IdProps {\n    id: string;\n}\n\nconst DeleteButton: React.FC<IdProps> = ({ id }: IdProps) => {\n    const dispatch = useAppDispatch();\n    const handleClick = async () => {\n        const resp = await chapaClient.deleteCreditCard(id);\n        console.log(resp);\n        if (resp.success === true) dispatch(deleteCard(id));\n    };\n    return (\n        <button className=\" btn btn-outline-danger btn-sm\" onClick={handleClick}>\n            X\n        </button>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport AddCard from \"../Add/AddCard\";\n\nimport { ChapaClient } from \"../chapaClient\";\nimport chapaClient from \"../helper\";\n\nimport { selectCards, setCards } from \"../state/cards/cardSlice\";\n\nimport { useAppDispatch, useAppSelector } from \"../store\";\nimport { CardListItem } from \"./ListItem\";\n\nexport const List = (): JSX.Element => {\n    const dispatch = useAppDispatch();\n    const cards = useAppSelector(selectCards);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchCards = async () => {\n            const allCards = await chapaClient.getAllCreditCards();\n            dispatch(setCards(allCards.data));\n            setLoading(false);\n        };\n\n        fetchCards();\n    }, []);\n\n    if (loading) return <h2 className=\"text-center\">Loading All Credit Cards</h2>;\n    return (\n        <div className=\"container  my-5\">\n            <AddCard />\n            <div className=\"row\">\n                {cards.map((message, index) => (\n                    <div className=\"col-md-6\" key={index}>\n                        <CardListItem card={message} />\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport { List } from \"./List/List\";\n\nexport const App = () => {\n    return <List />;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./App\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}